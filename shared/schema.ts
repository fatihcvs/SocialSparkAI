import { sql, relations } from "drizzle-orm";
import {
  pgTable,
  text,
  varchar,
  timestamp,
  json,
  boolean,
  integer,
  index,
} from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Session storage table for authentication
export const sessions = pgTable(
  "sessions",
  {
    sid: varchar("sid").primaryKey(),
    sess: json("sess").notNull(),
    expire: timestamp("expire").notNull(),
  },
  (table) => [index("IDX_session_expire").on(table.expire)],
);

// Users table
export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  email: varchar("email").notNull().unique(),
  passwordHash: text("password_hash").notNull(),
  name: varchar("name").notNull(),
  role: varchar("role").notNull().default("user"), // "user" | "admin"
  plan: varchar("plan").notNull().default("free"), // "free" | "pro"
  iyzicoCustomerId: varchar("iyzico_customer_id"),
  iyzicoSubscriptionId: varchar("iyzico_subscription_id"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Social accounts for external integrations
export const socialAccounts = pgTable("social_accounts", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  provider: varchar("provider").notNull().default("zapier"), // "zapier"
  accessToken: text("access_token"),
  profileId: varchar("profile_id"),
  createdAt: timestamp("created_at").defaultNow(),
});

// Content ideas generated by AI
export const contentIdeas = pgTable("content_ideas", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  topic: text("topic").notNull(),
  targetAudience: text("target_audience").notNull(),
  tone: varchar("tone").notNull(),
  platform: varchar("platform").notNull(), // "instagram" | "tiktok" | "linkedin" | "x"
  ideas: json("ideas").notNull(), // Array of generated ideas
  createdAt: timestamp("created_at").defaultNow(),
});

// Post assets and scheduling
export const postAssets = pgTable("post_assets", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  ideaId: varchar("idea_id").references(() => contentIdeas.id, { onDelete: "set null" }),
  caption: text("caption").notNull(),
  hashtags: text("hashtags"),
  imageUrl: text("image_url"),
  scheduledAt: timestamp("scheduled_at"),
  status: varchar("status").notNull().default("draft"), // "draft" | "scheduled" | "posted" | "failed"
  platform: varchar("platform").notNull(), // "instagram" | "linkedin" | "x"
  externalId: varchar("external_id"), // external service ID
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Subscriptions for billing
export const subscriptions = pgTable("subscriptions", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  iyzicoCustomerId: varchar("iyzico_customer_id").notNull(),
  iyzicoSubscriptionId: varchar("iyzico_subscription_id").notNull(),
  status: varchar("status").notNull(), // "active" | "canceled" | "past_due"
  currentPeriodEnd: timestamp("current_period_end"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// API usage tracking for rate limiting
export const apiUsage = pgTable("api_usage", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  endpoint: varchar("endpoint").notNull(),
  date: timestamp("date").notNull().defaultNow(),
  count: integer("count").notNull().default(1),
});

// Relations
export const usersRelations = relations(users, ({ many }) => ({
  socialAccounts: many(socialAccounts),
  contentIdeas: many(contentIdeas),
  postAssets: many(postAssets),
  subscriptions: many(subscriptions),
  apiUsage: many(apiUsage),
}));

export const socialAccountsRelations = relations(socialAccounts, ({ one }) => ({
  user: one(users, {
    fields: [socialAccounts.userId],
    references: [users.id],
  }),
}));

export const contentIdeasRelations = relations(contentIdeas, ({ one, many }) => ({
  user: one(users, {
    fields: [contentIdeas.userId],
    references: [users.id],
  }),
  postAssets: many(postAssets),
}));

export const postAssetsRelations = relations(postAssets, ({ one }) => ({
  user: one(users, {
    fields: [postAssets.userId],
    references: [users.id],
  }),
  idea: one(contentIdeas, {
    fields: [postAssets.ideaId],
    references: [contentIdeas.id],
  }),
}));

export const subscriptionsRelations = relations(subscriptions, ({ one }) => ({
  user: one(users, {
    fields: [subscriptions.userId],
    references: [users.id],
  }),
}));

export const apiUsageRelations = relations(apiUsage, ({ one }) => ({
  user: one(users, {
    fields: [apiUsage.userId],
    references: [users.id],
  }),
}));

// Insert schemas
export const insertUserSchema = createInsertSchema(users).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertSocialAccountSchema = createInsertSchema(socialAccounts).omit({
  id: true,
  createdAt: true,
});

export const insertContentIdeaSchema = createInsertSchema(contentIdeas).omit({
  id: true,
  createdAt: true,
});

export const insertPostAssetSchema = createInsertSchema(postAssets).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

// Types  
export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;
export type SocialAccount = typeof socialAccounts.$inferSelect;
export type InsertSocialAccount = z.infer<typeof insertSocialAccountSchema>;
export type ContentIdea = typeof contentIdeas.$inferSelect;
export type InsertContentIdea = z.infer<typeof insertContentIdeaSchema>;
export type PostAsset = typeof postAssets.$inferSelect;
export type InsertPostAsset = z.infer<typeof insertPostAssetSchema>;
export type Subscription = typeof subscriptions.$inferSelect;
export type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;
export type ApiUsage = typeof apiUsage.$inferSelect;
